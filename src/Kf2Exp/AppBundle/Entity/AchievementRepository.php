<?php

namespace Kf2Exp\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AchievementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AchievementRepository extends EntityRepository
{
  public function getAchievementsMapsDifficultyList()
  {
    $qb = $this->createQueryBuilder('a');
    $qb->select('a')
            ->where('a.map IS NOT NULL')
            ->orderBy('a.map', 'ASC');

    $achievementMaps = $qb->getQuery()
            ->getResult();

    $results = array();

    foreach ($achievementMaps as $achievementMap) {
      if (array_key_exists($achievementMap->getMap(), $results) == false) {
        $results[$achievementMap->getMap()] = array();
      }
    }

    foreach ($achievementMaps as $achievementMap) {
      $results[$achievementMap->getMap()][$achievementMap->getDifficulty()] = $achievementMap->getName();
    }

    return $results;
  }
  
  public function getAchievementsPerksDifficultyList()
  {
    $qb = $this->createQueryBuilder('a');
    $qb->select('a')
            ->where('a.perk IS NOT NULL')
            ->orderBy('a.perk', 'ASC');

    $achievementPerks = $qb->getQuery()
            ->getResult();

    $results = array();

    foreach ($achievementPerks as $achievementPerk) {
      if (array_key_exists($achievementPerk->getPerk(), $results) == false) {
        $results[$achievementPerk->getPerk()] = array();
      }
    }

    foreach ($achievementPerks as $achievementPerk) {
      $results[$achievementPerk->getPerk()][$achievementPerk->getDifficulty()] = $achievementPerk->getName();
    }
    
    return $results;
  }
  
  public function getAchievementsClassicList()
  {
    $qb = $this->createQueryBuilder('a');
    $qb->select('a')
            ->where('a.collectible IS NOT NULL')
            ->orderBy('a.visibleName', 'ASC');

    $achievementPerks = $qb->getQuery()
            ->getResult();

    $results = array();

    foreach ($achievementPerks as $achievementPerk) {
      $results[] = $achievementPerk->getName();
    }
    
    return $results;
  }
}
